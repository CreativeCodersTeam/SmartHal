@page "/items"
@using CreativeCoders.SmartHal.Web.Api.Core.Models
@using CreativeCoders.SmartHal.Web.Api.Client
@inject ISmartHalWebApi SmartHalWebApi

<h3>Items</h3>

<table class="table">
    <thead>
    <tr>
        <th>Name</th>
        <th>ItemType</th>
        <th>Value</th>
    </tr>
    </thead>
    <tbody>
    @if (_models == null)
    {
        <tr>
            <td colspan="3">
                <div>
                    <em>Loading...</em>
                </div>
            </td>
        </tr>
    }
    else
    {
        @foreach (var model in _models)
        {
            <tr>
                <td>
                    <a href="/items/@model.Name">@model.Name </a>
                </td>
                <td>@model.ItemType </td>
                <td>
                    <div class="input-group">
                        <input class="form-text" @bind="@model.Value"/>
                        <button class="btn btn-primary" @onclick=@(async () => await SendCommand(model))>Send</button>
                    </div>

                </td>
            </tr>
        }
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="ReloadItems">Refresh</button>


@code {
    private IEnumerable<ItemModel> _models;

    private string _exceptionMessage;

    protected override async Task OnInitializedAsync()
    {
        await ReloadItems();
    }

    public async Task ReloadItems()
    {
        try
        {
            _models = await SmartHalWebApi.GetItemsAsync();
        }
        catch (Exception e)
        {
            _exceptionMessage = e.ToString();
        }
    }

    public async Task SendCommand(ItemModel itemModel)
    {
        try
        {
            await SmartHalWebApi.SendCommandAsync(new SendCommandModel {CommandValue = itemModel.Value, ItemName = itemModel.Name});
        }
        catch (Exception)
        {
            Console.WriteLine($"Failed to send command. ItemName = '{itemModel.Name}', CommandValue = '{itemModel.Value}'");
        }
    }

}